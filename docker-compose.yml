version: "3.8"
services:
  redis-ag: # API Gateway database
    image: redis
    container_name: haniot-redis
    restart: always
    command: ["redis-server", "/etc/redis.conf"]
    volumes:
      - redis-gtw-data:/data
      - ./config/redisdb/redis.conf:/etc/redis.conf:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  redis-ds-agent: # Redis container for the Data Sync Agent
    image: redis
    container_name: haniot-redis-ds-agent
    restart: always
    command: ["redis-server", "/etc/redis.conf"]
    volumes:
      - redis-ds-agent-data:/data
      - ./config/redisdb/redis.conf:/etc/redis.conf:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongo-account: # Account service databases
    image: mongo
    container_name: haniot-mongo-account
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ADMIN_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ADMIN_PASS}
      - MONGO_APPLICATION_DATABASE=account
      - MONGO_APPLICATION_USER=${ACCOUNT_DB_USER}
      - MONGO_APPLICATION_PASS=${ACCOUNT_DB_PASS}
    command: ["mongod", "--config", "/etc/mongod.conf"]
    volumes:
      - mongo-account-data:/data/db
      - ./.certs/mongodb/:/etc/ssl/:ro
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./config/mongodb/mongodb-entrypoint.sh:/docker-entrypoint-initdb.d/mongodb-entrypoint.sh:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongo-mhealth: # MHealth service databases
    image: mongo
    container_name: haniot-mongo-mhealth
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ADMIN_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ADMIN_PASS}
      - MONGO_APPLICATION_DATABASE=mhealth
      - MONGO_APPLICATION_USER=${MHEALTH_DB_USER}
      - MONGO_APPLICATION_PASS=${MHEALTH_DB_PASS}
    command: ["mongod", "--config", "/etc/mongod.conf"]
    volumes:
      - mongo-mhealth-data:/data/db
      - ./.certs/mongodb/:/etc/ssl/:ro
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./config/mongodb/mongodb-entrypoint.sh:/docker-entrypoint-initdb.d/mongodb-entrypoint.sh:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongo-ehr: # EHR service databases
    image: mongo
    container_name: haniot-mongo-ehr
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ADMIN_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ADMIN_PASS}
      - MONGO_APPLICATION_DATABASE=ehr
      - MONGO_APPLICATION_USER=${EHR_DB_USER}
      - MONGO_APPLICATION_PASS=${EHR_DB_PASS}
    command: ["mongod", "--config", "/etc/mongod.conf"]
    volumes:
      - mongo-ehr-data:/data/db
      - ./.certs/mongodb/:/etc/ssl/:ro
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./config/mongodb/mongodb-entrypoint.sh:/docker-entrypoint-initdb.d/mongodb-entrypoint.sh:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongo-analytics: # Analytics service databases
    image: mongo
    container_name: haniot-mongo-analytics
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ADMIN_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ADMIN_PASS}
      - MONGO_APPLICATION_DATABASE=analytics
      - MONGO_APPLICATION_USER=${ANALYTICS_DB_USER}
      - MONGO_APPLICATION_PASS=${ANALYTICS_DB_PASS}
    command: ["mongod", "--config", "/etc/mongod.conf"]
    volumes:
      - mongo-analytics-data:/data/db
      - ./.certs/mongodb/:/etc/ssl/:ro
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./config/mongodb/mongodb-entrypoint.sh:/docker-entrypoint-initdb.d/mongodb-entrypoint.sh:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongo-notification: # Notification service databases
    image: mongo
    container_name: haniot-mongo-notification
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ADMIN_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ADMIN_PASS}
      - MONGO_APPLICATION_DATABASE=notification
      - MONGO_APPLICATION_USER=${NOTIFICATION_DB_USER}
      - MONGO_APPLICATION_PASS=${NOTIFICATION_DB_PASS}
    command: ["mongod", "--config", "/etc/mongod.conf"]
    volumes:
      - mongo-notification-data:/data/db
      - ./.certs/mongodb/:/etc/ssl/:ro
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./config/mongodb/mongodb-entrypoint.sh:/docker-entrypoint-initdb.d/mongodb-entrypoint.sh:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongo-ds-agent: # Data Sync Agent service databases
    image: mongo
    container_name: haniot-mongo-ds-agent
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ADMIN_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ADMIN_PASS}
      - MONGO_APPLICATION_DATABASE=ds-agent
      - MONGO_APPLICATION_USER=${DS_DB_USER}
      - MONGO_APPLICATION_PASS=${DS_DB_PASS}
    command: ["mongod", "--config", "/etc/mongod.conf"]
    volumes:
      - mongo-ds-agent-data:/data/db
      - ./.certs/mongodb/:/etc/ssl/:ro
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./config/mongodb/mongodb-entrypoint.sh:/docker-entrypoint-initdb.d/mongodb-entrypoint.sh:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  influxdb-timeseries: # Time Series service databases
    image: influxdb
    container_name: haniot-influxdb-timeseries
    restart: always
    environment:
      - INFLUXDB_DB=timeseries
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASS}
      - INFLUXDB_USER=${INFLUXDB_USER}
      - INFLUXDB_USER_PASSWORD=${INFLUXDB_PASS}
    volumes:
      - influxdb-timeseries-data:/var/lib/influxdb
      - ./.certs/influxdb/:/etc/ssl/:ro
      - ./config/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  api-gateway: # Container for HANIoT API Gateway
    image: haniot/api-gateway
    container_name: haniot-api-gateway
    restart: always
    ports:
      - ${AG_PORT_HTTP}:${AG_PORT_HTTP}  # HTTP port, visible externally to the host
      - ${AG_PORT_HTTPS}:${AG_PORT_HTTPS}  # HTTPS port, visible externally to the host
    depends_on:
      - redis-ag
    environment:
      - TZ=America/Sao_Paulo
      - NODE_ENV=${NODE_ENV:-development}
      - PORT_HTTP=${AG_PORT_HTTP}
      - PORT_HTTPS=${AG_PORT_HTTPS}
      - SSL_CERT_PATH=/etc/ssl/server_cert.pem
      - SSL_KEY_PATH=/etc/ssl/server_key.pem
      - JWT_PUBLIC_KEY_PATH=/etc/ssl/jwt.key.pub
      - ISSUER=haniot
      - RECAPTCHA_SERVER_KEY=${RECAPTCHA_SERVER_KEY}
      - API_GATEWAY_HOSTNAME=${API_GATEWAY_HOSTNAME}
      - WEB_APP_HOSTNAME=${WEB_APP_HOSTNAME}
      - RABBIT_MGT_HOSTNAME=${RABBIT_MGT_HOSTNAME}
      - ACCOUNT_SERVICE=https://account:3001
      - MHEALTH_SERVICE=https://mhealth:4001
      - EHR_SERVICE=https://ehr:5001
      - ANALYTICS_SERVICE=https://analytics:6001
      - NOTIFICATION_SERVICE=https://notification:7001
      - TIME_SERIES_SERVICE=https://timeseries:8001
      - DS_AGENT_SERVICE=https://ds-agent:9001
      - WEB_APP_SERVICE=https://dashboard:443
      - RABBIT_MGT_SERVICE=http://rabbitmq:15672
      - EMULATE_REDIS=false
      - PORT_REDIS=6379
      - HOST_REDIS=redis-ag
    volumes:
      - ./.certs/api-gtw/:/etc/ssl/:ro
      - ${SSL_CERT_PATH}:/etc/ssl/server_cert.pem:ro
      - ${SSL_KEY_PATH}:/etc/ssl/server_key.pem:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  dashboard: # Container for HANIoT dashboard app
    image: haniot/dashboard
    container_name: haniot-dashboard
    restart: always
    depends_on:
      - api-gateway
    environment:
      - TZ=America/Sao_Paulo
      - NODE_ENV=${NODE_ENV:-development}
      - DASHBOARD_HOST=https://${WEB_APP_HOSTNAME}
      - PORT_HTTP=80
      - PORT_HTTPS=443
      - SSL_CERT_PATH=/etc/ssl/server_cert.pem
      - SSL_KEY_PATH=/etc/ssl/server_key.pem
      - API_GATEWAY_SERVICE=https://${API_GATEWAY_HOSTNAME}:${AG_PORT_HTTPS}
      - LS_SECRET_KEY=${LS_SECRET_KEY}
      - RECAPTCHA_KEY=${RECAPTCHA_KEY}
    volumes:
      - ${SSL_CERT_PATH}:/etc/ssl/server_cert.pem:ro
      - ${SSL_KEY_PATH}:/etc/ssl/server_key.pem:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  account: # Container for HANIoT Account Service
    image: haniot/account-service
    container_name: haniot-account
    restart: always
    depends_on:
      - mongo-account
      - rabbitmq
    environment:
      - TZ=America/Sao_Paulo
      - NODE_ENV=${NODE_ENV:-development}
      - PORT_HTTP=3000
      - PORT_HTTPS=3001
      - SSL_CERT_PATH=/etc/ssl/server_cert.pem
      - SSL_KEY_PATH=/etc/ssl/server_key.pem
      - JWT_PRIVATE_KEY_PATH=/etc/ssl/jwt.key
      - JWT_PUBLIC_KEY_PATH=/etc/ssl/jwt.key.pub
      - ISSUER=haniot
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MONGODB_ENABLE_TLS=true
      - MONGODB_URI=mongodb://${ACCOUNT_DB_USER}:${ACCOUNT_DB_PASS}@mongo-account:27017/account?ssl=true
      - MONGODB_CA_PATH=/etc/ssl/ca.pem
      - MONGODB_KEY_PATH=/etc/ssl/mongodb.pem
      - RABBITMQ_URI=${ACCOUNT_RABBITMQ_URI}
      - RABBITMQ_CA_PATH=/etc/ssl/ca.pem
      - RABBITMQ_CERT_PATH=/etc/ssl/rabbitmq_cert.pem
      - RABBITMQ_KEY_PATH=/etc/ssl/rabbitmq_key.pem
      - DASHBOARD_HOST=https://${WEB_APP_HOSTNAME}
    volumes:
      - ./.certs/account/:/etc/ssl/:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  mhealth: # Container for HANIoT MHealth Service
    image: haniot/mhealth-service
    container_name: haniot-mhealth
    restart: always
    depends_on:
      - mongo-mhealth
      - rabbitmq
    environment:
      - TZ=America/Sao_Paulo
      - NODE_ENV=${NODE_ENV:-development}
      - PORT_HTTP=4000
      - PORT_HTTPS=4001
      - SSL_CERT_PATH=/etc/ssl/server_cert.pem
      - SSL_KEY_PATH=/etc/ssl/server_key.pem
      - MONGODB_ENABLE_TLS=true
      - MONGODB_URI=mongodb://${MHEALTH_DB_USER}:${MHEALTH_DB_PASS}@mongo-mhealth:27017/mhealth?ssl=true
      - MONGODB_CA_PATH=/etc/ssl/ca.pem
      - MONGODB_KEY_PATH=/etc/ssl/mongodb.pem
      - RABBITMQ_URI=${MHEALTH_RABBITMQ_URI}
      - RABBITMQ_CA_PATH=/etc/ssl/ca.pem
      - RABBITMQ_CERT_PATH=/etc/ssl/rabbitmq_cert.pem
      - RABBITMQ_KEY_PATH=/etc/ssl/rabbitmq_key.pem
    volumes:
      - ./.certs/mhealth/:/etc/ssl/:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  ehr: # Container for HANIoT EHR Service
    image: haniot/ehr-service
    container_name: haniot-ehr
    restart: always
    depends_on:
      - mongo-ehr
      - rabbitmq
    environment:
      - TZ=America/Sao_Paulo
      - NODE_ENV=${NODE_ENV:-development}
      - PORT_HTTP=5000
      - PORT_HTTPS=5001
      - SSL_CERT_PATH=/etc/ssl/server_cert.pem
      - SSL_KEY_PATH=/etc/ssl/server_key.pem
      - MONGODB_ENABLE_TLS=true
      - MONGODB_URI=mongodb://${EHR_DB_USER}:${EHR_DB_PASS}@mongo-ehr:27017/ehr?ssl=true
      - MONGODB_CA_PATH=/etc/ssl/ca.pem
      - MONGODB_KEY_PATH=/etc/ssl/mongodb.pem
      - RABBITMQ_URI=${EHR_RABBITMQ_URI}
      - RABBITMQ_CA_PATH=/etc/ssl/ca.pem
      - RABBITMQ_CERT_PATH=/etc/ssl/rabbitmq_cert.pem
      - RABBITMQ_KEY_PATH=/etc/ssl/rabbitmq_key.pem
    volumes:
      - ./.certs/ehr/:/etc/ssl/:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  analytics: # Container for HANIoT Analytics Service
    image: haniot/analytics-service
    container_name: haniot-analytics
    restart: always
    depends_on:
      - mongo-analytics
      - rabbitmq
    environment:
      - TZ=America/Sao_Paulo
      - NODE_ENV=${NODE_ENV:-development}
      - PORT_HTTP=6000
      - PORT_HTTPS=6001
      - SSL_CERT_PATH=/etc/ssl/server_cert.pem
      - SSL_KEY_PATH=/etc/ssl/server_key.pem
      - MONGODB_ENABLE_TLS=true
      - MONGODB_URI=mongodb://${ANALYTICS_DB_USER}:${ANALYTICS_DB_PASS}@mongo-analytics:27017/analytics?ssl=true
      - MONGODB_CA_PATH=/etc/ssl/ca.pem
      - MONGODB_KEY_PATH=/etc/ssl/mongodb.pem
      - RABBITMQ_URI=${ANALYTICS_RABBITMQ_URI}
      - RABBITMQ_CA_PATH=/etc/ssl/ca.pem
      - RABBITMQ_CERT_PATH=/etc/ssl/rabbitmq_cert.pem
      - RABBITMQ_KEY_PATH=/etc/ssl/rabbitmq_key.pem
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_BUCKET_REGION=${AWS_BUCKET_REGION}
      - DASHBOARD_HOST=https://${WEB_APP_HOSTNAME}
    volumes:
      - ./.certs/analytics/:/etc/ssl/:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  notification: # Container for HANIoT Notification Service
    image: haniot/notification-service
    container_name: haniot-notification
    restart: always
    depends_on:
      - mongo-notification
      - rabbitmq
    environment:
      - TZ=America/Sao_Paulo
      - NODE_ENV=${NODE_ENV:-development}
      - PORT_HTTP=7000
      - PORT_HTTPS=7001
      - SSL_CERT_PATH=/etc/ssl/server_cert.pem
      - SSL_KEY_PATH=/etc/ssl/server_key.pem
      - MONGODB_ENABLE_TLS=true
      - MONGODB_URI=mongodb://${NOTIFICATION_DB_USER}:${NOTIFICATION_DB_PASS}@mongo-notification:27017/notification?ssl=true
      - MONGODB_CA_PATH=/etc/ssl/ca.pem
      - MONGODB_KEY_PATH=/etc/ssl/mongodb.pem
      - RABBITMQ_URI=${NOTIFICATION_RABBITMQ_URI}
      - RABBITMQ_CA_PATH=/etc/ssl/ca.pem
      - RABBITMQ_CERT_PATH=/etc/ssl/rabbitmq_cert.pem
      - RABBITMQ_KEY_PATH=/etc/ssl/rabbitmq_key.pem
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SENDER_NAME=HANIoT
    volumes:
      - ./.certs/notification/:/etc/ssl/:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  timeseries: # Container for HANIoT Time Series service
    image: haniot/timeseries-service
    container_name: haniot-timeseries
    restart: always
    depends_on:
      - influxdb-timeseries
      - rabbitmq
    environment:
      - TZ=America/Sao_Paulo
      - NODE_ENV=${NODE_ENV}
      - PORT_HTTP=8000
      - PORT_HTTPS=8001
      - SSL_CERT_PATH=/etc/ssl/server_cert.pem
      - SSL_KEY_PATH=/etc/ssl/server_key.pem
      - INFLUXDB_HOST=influxdb-timeseries
      - INFLUXDB_PORT=8086
      - INFLUXDB_PROTOCOL=https
      - INFLUXDB_NAME=timeseries
      - INFLUXDB_USER=${INFLUXDB_USER}
      - INFLUXDB_PASS=${INFLUXDB_PASS}
      - INFLUXDB_CERT_PATH=/etc/ssl/influxdb_cert.pem
      - INFLUXDB_KEY_PATH=/etc/ssl/influxdb_key.pem
      - INFLUXDB_CA_PATH=/etc/ssl/ca.pem
      - RABBITMQ_URI=${TS_RABBITMQ_URI}
      - RABBITMQ_CERT_PATH=/etc/ssl/rabbitmq_cert.pem
      - RABBITMQ_KEY_PATH=/etc/ssl/rabbitmq_key.pem
      - RABBITMQ_CA_PATH=/etc/ssl/ca.pem
    volumes:
      - ./.certs/timeseries/:/etc/ssl/:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  ds-agent: # Container for HANIoT Data Sync Agent
    image: haniot/ds-agent-service
    container_name: haniot-ds-agent
    restart: always
    depends_on:
      - mongo-ds-agent
      - redis-ds-agent
      - rabbitmq
    environment:
      - TZ=America/Sao_Paulo
      - NODE_ENV=${NODE_ENV}
      - PORT_HTTP=9000
      - PORT_HTTPS=9001
      - SSL_CERT_PATH=/etc/ssl/server_cert.pem
      - SSL_KEY_PATH=/etc/ssl/server_key.pem
      - MONGODB_ENABLE_TLS=true
      - MONGODB_URI=mongodb://${DS_DB_USER}:${DS_DB_PASS}@mongo-ds-agent:27017/ds-agent?ssl=true
      - MONGODB_CA_PATH=/etc/ssl/ca.pem
      - MONGODB_KEY_PATH=/etc/ssl/mongodb.pem
      - RABBITMQ_URI=${DS_RABBITMQ_URI}
      - RABBITMQ_CA_PATH=/etc/ssl/ca.pem
      - RABBITMQ_CERT_PATH=/etc/ssl/rabbitmq_cert.pem
      - RABBITMQ_KEY_PATH=/etc/ssl/rabbitmq_key.pem
      - REDIS_URI=redis://redis-ds-agent:6379
      - FITBIT_CLIENT_ID=${FITBIT_CLIENT_ID}
      - FITBIT_CLIENT_SECRET=${FITBIT_CLIENT_SECRET}
      - EXPRESSION_AUTO_SYNC=${EXPRESSION_AUTO_SYNC}
    volumes:
      - ./.certs/ds-agent/:/etc/ssl/:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

  rabbitmq: # Container for RabbitMQ
    image: rabbitmq:3-management-alpine
    container_name: haniot-rabbitmq
    restart: always
    ports:
      - 15672:15672 # AMQP Management UI
      - 5672:5672 # AMQP Service
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./.certs/rabbitmq/:/etc/ssl/:ro
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - haniot-network
    logging:
      driver: json-file
      options:
        max-size: 100m

volumes:
  redis-gtw-data:
    name: haniot-redis-gateway
  redis-ds-agent-data:
    name: haniot-redis-ds-agent
  mongo-account-data:
    name: haniot-mongo-account
  mongo-mhealth-data:
    name: haniot-mongo-mhealth
  mongo-ehr-data:
    name: haniot-mongo-ehr
  mongo-analytics-data:
    name: haniot-mongo-analytics
  mongo-notification-data:
    name: haniot-mongo-notification
  mongo-ds-agent-data:
    name: haniot-mongo-ds-agent
  influxdb-timeseries-data:
    name: haniot-influxdb-timeseries
  rabbitmq-data:
    name: haniot-rabbitmq

networks:
  haniot-network:
    name: haniot-network
    driver: bridge
